plugins {
    id "org.sonarqube" version "3.1.1"
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-kapt"
    id "kotlin-parcelize"
    id "checkstyle"
}


android {
    compileSdkVersion 33
    buildToolsVersion '30.0.3'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjvm-default=compatibility']
    }

    signingConfigs {
        release {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        dev {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    defaultConfig {
        applicationId "org.schabi.newpipe"
        resValue "string", "app_name", "NewPipe"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode 975
        versionName "0.21.9"

        multiDexEnabled true
        // app_key is NewPipe by default
        manifestPlaceholders += [app_key: "NewPipe"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles 'test-proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles 'test-proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
        // suppress false warning ("Resource IDs will be non-final in Android Gradle Plugin version
        // 5.0, avoid using them in switch case statements"), which affects only library projects
        disable 'NonConstantResourceId'
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    buildFeatures {
        viewBinding true
    }

    productFlavors {
        continuousIntegration {
            flavorDimensions "ci"
            resValue "string", "app_key", "Newpipe"
        }
        localDev {
            flavorDimensions "dev"
            resValue "string", "app_key", "Newpipe"
        }

        prod {
            flavorDimensions "prod"
            resValue "string", "app_key", "Newpipe"
        }

        staging {
            flavorDimensions "staging"
            resValue "string", "app_key", "Newpipe_staging"
        }
    }
}

ext {
    checkstyleVersion = '8.38'

    androidxLifecycleVersion = '2.3.1'
    androidxRoomVersion = '2.5.1'

    icepickVersion = '3.2.0'
    exoPlayerVersion = '2.12.3'
    googleAutoServiceVersion = '1.0'
    groupieVersion = '2.9.0'
    markwonVersion = '4.6.2'

    leakCanaryVersion = '2.5'
    stethoVersion = '1.6.0'
    mockitoVersion = '3.6.0'
}

configurations {
    checkstyle
    ktlint
}

checkstyle {
    getConfigDirectory().set(rootProject.file("."))
    ignoreFailures false
    showViolations true
    toolVersion = checkstyleVersion
}

kapt {
    correctErrorTypes true
}


task runCheckstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    exclude 'main/java/us/shandian/giga/**'

    classpath = configurations.checkstyle

    showViolations true

    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }
}

def outputDir = "${project.buildDir}/reports/ktlint/"
def inputFiles = project.fileTree(dir: "src", include: "**/*.kt")

task runKtlint(type: JavaExec) {
    inputs.files(inputFiles)
    outputs.dir(outputDir)
    getMainClass().set("com.pinterest.ktlint.Main")
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

task formatKtlint(type: JavaExec) {
    inputs.files(inputFiles)
    outputs.dir(outputDir)
    getMainClass().set("com.pinterest.ktlint.Main")
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

afterEvaluate {
    //preDebugBuild.dependsOn formatKtlint, runCheckstyle, runKtlint
}

sonarqube {
    properties {
        property "sonar.projectKey", "TeamNewPipe_NewPipe"
        property "sonar.organization", "teamnewpipe"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

dependencies {
/** Desugaring **/
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

/** NewPipe libraries **/
    // You can use a local version by uncommenting a few lines in settings.gradle
    // Or you can use a commit you pushed to GitHub by just replacing TeamNewPipe with your GitHub
    // name and the commit hash with the commit hash of the (pushed) commit you want to test
    // This works thanks to JitPack: https://jitpack.io/
    implementation 'com.github.TeamNewPipe:nanojson:1d9e1aea9049fc9f85e68b43ba39fe7be1c1f751'
    implementation 'com.github.TeamNewPipe:NewPipeExtractor:v0.21.9'

/** Checkstyle **/
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
    ktlint 'com.pinterest:ktlint:0.40.0'

/** Kotlin **/
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"

/** AndroidX **/
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    implementation "androidx.lifecycle:lifecycle-livedata:${androidxLifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-viewmodel:${androidxLifecycleVersion}"
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'androidx.media:media:1.3.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation "androidx.room:room-runtime:${androidxRoomVersion}"
    implementation "androidx.room:room-rxjava3:${androidxRoomVersion}"
    kapt "androidx.room:room-compiler:${androidxRoomVersion}"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.webkit:webkit:1.4.0'
    implementation 'com.google.android.material:material:1.2.1'

/** Third-party libraries **/
    // Instance state boilerplate elimination
    implementation "frankiesardo:icepick:${icepickVersion}"
    kapt "frankiesardo:icepick-processor:${icepickVersion}"

    // HTML parser
    implementation "org.jsoup:jsoup:1.13.1"

    // HTTP client
    //noinspection GradleDependency --> do not update okhttp to keep supporting Android 4.4 users
    implementation "com.squareup.okhttp3:okhttp:3.12.13"

    // Media player
    implementation "com.google.android.exoplayer:exoplayer:${exoPlayerVersion}"
    implementation "com.google.android.exoplayer:extension-mediasession:${exoPlayerVersion}"

    // Metadata generator for service descriptors
    compileOnly "com.google.auto.service:auto-service-annotations:${googleAutoServiceVersion}"
    kapt "com.google.auto.service:auto-service:${googleAutoServiceVersion}"

    // Manager for complex RecyclerView layouts
    implementation "com.github.lisawray.groupie:groupie:${groupieVersion}"
    implementation "com.github.lisawray.groupie:groupie-viewbinding:${groupieVersion}"

    // Circular ImageView
    implementation "de.hdodenhof:circleimageview:3.1.0"
    // Image loading
    implementation "com.nostra13.universalimageloader:universal-image-loader:1.9.5"

    // Markdown library for Android
    implementation "io.noties.markwon:core:${markwonVersion}"
    implementation "io.noties.markwon:linkify:${markwonVersion}"

    // File picker
    implementation "com.nononsenseapps:filepicker:4.2.1"

    // Crash reporting
    implementation "ch.acra:acra-core:5.7.0"

    // Reactive extensions for Java VM
    implementation "io.reactivex.rxjava3:rxjava:3.0.7"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    // RxJava binding APIs for Android UI widgets
    implementation "com.jakewharton.rxbinding4:rxbinding:4.0.0"

    println("Current flavor selected: " + getCurrentFlavor())
    println("SDK Version: " + getContextualSdkVersion())
    if(getCurrentFlavor().contentEquals("localDev")){
        implementation project(":contextual"), {
            exclude group: 'androidx.room'
        }
    } else if(getCurrentFlavor().contentEquals("prod")){
        implementation (group: "com.contextu.al", name: "contextual", version: getContextualSdkVersion()){
            exclude group: 'androidx.room'
        }
    } else {
        // This is used by CI(dev and staging)
        implementation (group: "com.contextu.al.dev", name: "contextual", version: getContextualSdkVersion()){
            exclude group: 'androidx.room'
        }
    }


    // Date and time formatting
    implementation "org.ocpsoft.prettytime:prettytime:5.0.1.Final"

 // Debug bridge for Android
    debugImplementation "com.facebook.stetho:stetho:${stethoVersion}"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:${stethoVersion}"

/** Testing **/
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoVersion}"

    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.room:room-testing:${androidxRoomVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0", {
        exclude module: 'support-annotations'
    }
}

static String getGitWorkingBranch() {
    try {
        def gitProcess = "git rev-parse --abbrev-ref HEAD".execute()
        gitProcess.waitFor()
        if (gitProcess.exitValue() == 0) {
            return gitProcess.text.trim()
        } else {
            // not a git repository
            return ""
        }
    } catch (IOException ignored) {
        // git was not found
        return ""
    }
}

// https://stackoverflow.com/questions/30621183/how-to-get-current-flavor-in-gradle
// A gradle sync will not get the correct `tskReqStr` variable. A build is required(e.g. assembleLocalDevDebug)
def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString().toLowerCase()
    if (tskReqStr.contains("prod")) {
        return "prod"
    } else if(tskReqStr.contains("localdev")) {
        return "localDev"
    } else if(tskReqStr.contains("staging")){
        return "staging"
    } else {
        // Invoked by CI
        return "dev"
    }
}

def getContextualSdkVersion(){
    Properties properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    return properties.getProperty("VERSION_NAME", "2.+")
}